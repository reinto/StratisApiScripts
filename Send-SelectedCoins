function Get-SpendableCoins {
    <#
    .SYNOPSIS
        Returns a lis of Spendable Transactions for a wallet and account

    .DESCRIPTION
        Get-SpendableCoins utilizes the REST Api endpoint /api/Wallet/spendable-transactions to return
        all Unspent Transaction Outputs (UTXOs) for a given wallet and account. 

    .PARAMETER WalletName
    Specifies the wallet name.

    .PARAMETER AccountName
    Specifies the Account Name to query. 'account 0' is the default.

    .PARAMETER BaseUri
    Specifies the Host presenting the REST Api for the wallet endpoints. 'http://localhost:17103' is 
    the default.

    .INPUTS
    
    None. You cannot pipe objects to Get-SpendableCoins.

    .OUTPUTS

    System.Array. Get-SpendableCoins returns a list of transaction objects.
    
    .EXAMPLE

    PS> Get-SpendableCoins -WalletName 'MyWallet' -AccountName 'account 1'

    id       index  address       isChange     amount  creationTime  confirmations
    --       -----  -------       --------     ------  ------------  -------------
    200d4...     2  XMBbvUp...    False     100717731    1605123328          37235
    200d4...     3  XMBbvUp...    False     100717731    1605123328          37235
    #>

    param (
        [Parameter(Mandatory=$true)][string]$WalletName,
        [string]$AccountName = 'account 0',
        [string]$BaseUri = 'http://localhost:17103'
    )

    $Uri = "{0}/api/Wallet/spendable-transactions?WalletName={1}&AccountName={2}" -f $BaseUri, $WalletName, [uri]::EscapeDataString($AccountName)
    $Coins = Invoke-RestMethod -Method Get -Uri $Uri
    return $Coins.transactions
}

function Select-CoinsToSend {
    <#
    .SYNOPSIS
    Returns a lis of Spendable Transactions the user can select interactively.

    .DESCRIPTION
    Select-CoinsToSpend calls the Get-SpendableCoins function to provirde a list of
    available UTXOs from which a coin selection can be made. It then returns all
    selected UTXOs for the entered wallet and account.

    .PARAMETER WalletName
    Specifies the wallet name.

    .PARAMETER AccountName
    Specifies the Account Name to query. 'account 0' is the default.

    .INPUTS
    
    None. You cannot pipe objects to Select-CoinsToSpend.

    .OUTPUTS

    System.Array. Select-CoinsToSpend returns a list of selected transaction objects.
    
    .EXAMPLE

    PS> Select-CoinsToSpend -WalletName 'MyWallet' -AccountName 'account 1'

    Coin #  Coin Address      Amount        Creation Date  confirmations
     -----  ------------      ------         ------------  -------------
         0  XMBbvUpFg...  1.00717731  16/11/2020 14:50:08           3723
         1  XMBbvUpFg...  1.00717731  16/11/2020 14:50:08           3723
         2  XMBbvUpFg...  1.00717731  16/11/2020 14:50:08           3723

    
    Choose the coins to send by entering the 'Coin #' seperated by a comma: 0, 1
    
    id       index  address       isChange     amount  creationTime  confirmations
    --       -----  -------       --------     ------  ------------  -------------
    200d4...     2  XMBbvUp...    False     100717731    1605123328          37235
    200d4...     3  XMBbvUp...    False     100717731    1605123328          37235

    .LINK
    Get-SpendableCoins
    #>
    
    param (
        [Parameter(Mandatory=$true)] [string]$WalletName,
        [string]$AccountName = 'account 0'
    )

    $Spendable = Get-SpendableCoins -WalletName $WalletName -AccountName $AccountName | Sort-Object -Property address
    $index = 0
    $Selectable = foreach ($Coin in $Spendable) {
        [pscustomobject] @{
            'Coin #' = $index
            'Coin Address' = $Coin.address
            Amount = $Coin.amount / 1e8
            'Creation Date' = (Get-Date 1-1-1970).AddSeconds($Coin.creationTime)
            Confirmations = $Coin.confirmations
        }
        $index += 1
    }
    $Selectable | Out-GridView
    $SelectionInput = Read-Host "Choose the coins to send by entering the 'Coin #' seperated by a comma"
    $Coins = foreach ($i in ($SelectionInput -split ',').Trim()) {
        $Spendable[$i]
    }
    return $Coins
}

function Send-SelectedCoins {
    <#
    .SYNOPSIS
        Returns a lis of Spendable Transactions for a wallet and account

    .DESCRIPTION
        Send-SelectedCoins utilizes the REST Api endpoint /api/Wallet/build-transaction and /api/wallet/send-transaction to send
        all or a specified amount from a selected set of coins to a specifyable destination address.

    .PARAMETER Coins
    Accepts an array of transaction objects

    .PARAMETER DestinationAddress
    Specifies the address of the destination wallet.
    
    .PARAMETER WalletName
    Specifies the wallet name.

    .PARAMETER Password
    Specifies the password for the selected wallet holding the coins.

    .PARAMETER AccountName
    Specifies the Account Name to query. 'account 0' is the default.

    .PARAMETER BaseUri
    Specifies the Host presenting the REST Api for the wallet endpoints. 'http://localhost:17103' is 
    the default.

    .PARAMETER Fee
    Specefies the amount of fee used for sending the transaction. '0.0002' is the default.

    .PARAMETER AmountForDestination
    Specifies the amount for the destination address to receive. Default is total amount of all selected coins.

    .INPUTS
    
    None. You cannot pipe objects to Get-SpendableCoins.

    .OUTPUTS

    System.Management.Automation.PSCustomObject. Send-SelectedCoins returns an object containing a transactionId and outputs objects
    consisting of combincations of address and amount.
    
    .EXAMPLE

    PS> Send-SelectedCoins -Coins $(Select-CoinsToSend) -DestinationAddress $DestinationAddress -WalletName 'MyWallet' -Password 'QwErTy123'

    transactionId  outputs                                                            
    -------------  -------                                                            
    bd274cb390...  {@{address=XC...; amount=13604196}}

    .LINK
    Select-CoinsToSend

    .LINK
    Get-SpendableCoins
    #>
    
    param (
        [Parameter(Mandatory=$true)] [array]$Coins,
        [Parameter(Mandatory=$true)] [string]$DestinationAddress,
        [Parameter(Mandatory=$true)] [string]$WalletName,
        [Parameter(Mandatory=$true)] [string]$Password,
        [string]$AccountName = 'account 0',
        [string]$BaseUri = 'http://localhost:17103',
        [double]$Fee = 0.002,
        [double]$AmountForDestination,
        [string]$ChangeAddress        
    )

    $CoinsAmount = ($Coins.amount | Measure-Object -sum).sum / 1e8
    if (-not $ChangeAddress -and -not $AmountForDestination) {
        $AmountForDestination = $CoinsAmount - $Fee
        $ChangeAddress = $Coins[0].address
    } elseif ($ChangeAddress -and $AmountForDestination) {
        if ($AmountForDestination + $Fee -gt $CoinsAmount) {
            Write-Host "You made a bad calculation. You selected too few coins or entered a too high amount"
            exit
        }
    } else {
        Write-Host "You set on of the variables but not the other: AmountForDestination, ChangeAddress"
        exit
    }
        

    [array]$CoinOutpoints = foreach ($Coin in $Coins) {
        [pscustomobject]@{
            transactionId = $Coin.id
            index = $Coin.index
        }
    }

    [array]$Recipients = [pscustomobject] @{
        destinationAddress = $DestinationAddress
        amount = $AmountForDestination.ToString()
    }

    $BuildBody = ConvertTo-Json @{
        feeAmount = $Fee.ToString()
        password = $Password
        walletName = $WalletName
        accountName = $AccountName
        outpoints = $CoinOutpoints
        recipients = $Recipients
        changeAddress = $ChangeAddress
    }
    
    $BuildUri = "{0}/api/Wallet/build-transaction" -f $BaseUri
    $Tx = Invoke-RestMethod -Method Post -Uri $BuildUri -Body $BuildBody -ContentType "application/json"

    $SendBody = ConvertTo-Json @{
        hex = "$($Tx.hex)"
    }

    $SendUri =  "{0}/api/Wallet/send-transaction" -f $BaseUri
    return Invoke-RestMethod -Method Post -Uri $SendUri -Body $SendBody -ContentType "application/json"
}

Clear-Host
Write-Host "This script will let you select coins you want to transfer to a destination address." -ForegroundColor Cyan
Write-Host "It will also let you set a custom amount and change address." -ForegroundColor Cyan

$BaseUri = 'http://localhost:17103'

# Check for Wallet to use
[array]$Wallets = (Invoke-RestMethod -Method Get -uri ("{0}/api/Wallet/list-wallets" -f $BaseUri) -ErrorAction SilentlyContinue).walletNames
if ($Wallets.count -eq 1) {
    $WalletName = $Wallets.ToString()
} elseif ($Wallets.count -ge 2) {
    while ($WalletName -notin $Wallets) {
        Write-Host "Found multiple wallets:" -ForegroundColor Yellow
        Write-Output $Wallets
        $WalletName = Read-Host "Pick one"
    }
} else {
    Write-Host "No wallets found. Stopping" -ForegroundColor Red
    exit
}

# Check for Accounts
[array]$WalletAccounts = Invoke-RestMethod -Method Get -uri ("{0}/api/Wallet/accounts?WalletName={1}" -f $BaseUri, $WalletName)
if ($WalletAccounts.count -eq 1) {
    $AccountName = $WalletAccounts.ToString()
} else {
    while ($AccountName -notin $WalletAccounts) {
        Write-Host "Found multiple accounts:" -ForegroundColor Yellow
        Write-Output $WalletAccounts
        $AccountName = Read-Host "Pick one"
    }
}

# Get the Wallet Password
$Creds = Get-Credential -UserName $WalletName -Message "Enter the password for your Wallet"
$Password = $Creds.GetNetworkCredential().Password

# Get the Destination Address
while ($DestinationAddress -cnotlike 'X*' -or $DestinationAddress.Length -ne 34) {
    $DestinationAddress = Read-Host "Enter a VALID Destination Address"
}

# Check whether or not a custom amount and change address are required. Then Send the Transaction.
while ($SpecifyAmount -ne 'y' -and $SpecifyAmount -ne 'n') {
    $SpecifyAmount = Read-Host "Do you want to specify an amount and change address? y/n"
}

if ($SpecifyAmount -eq 'y') {
    $AmountToSend = Read-Host "Specify the amount (in STRAX) to send"
    while ($ChangeAddress -cnotlike 'X*' -or $ChangeAddress.Length -ne 34) {
        $ChangeAddress = Read-Host "Enter a VALID Change Address"
    }    
    Send-SelectedCoins -Coins $(Select-CoinsToSend -WalletName $WalletName) -DestinationAddress $DestinationAddress -WalletName $WalletName `
        -AccountName $AccountName -Password $Password -AmountForDestination ([double]$AmountToSend) -ChangeAddress $ChangeAddress
} elseif ($SpecifyAmount -eq 'n') {
    Send-SelectedCoins -Coins $(Select-CoinsToSend -WalletName $WalletName) -DestinationAddress $DestinationAddress -WalletName $WalletName `
            -AccountName $AccountName -Password $Password
} else {exit}


Clear-Variable Creds,Password
